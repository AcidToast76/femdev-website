name: CoSign

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  example:
    runs-on: ubuntu-latest
    name: CoSign Runner
    steps:
    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.3.0
    - name: Check install!
      run: cosign version
    - name: Checkout code
      uses: actions/checkout@v4.1.1
      with:
        ref: ${{ github.ref }}
    # check if the commit has a semver value in the commit message
    # if so, generate a zip archive of the code, sign the file,
    # and create a release in the repository with the signed file
    # and the release notes to be entered from a CHANGELOG.md file
    - name: Prepare Release
      run: |
        echo "Creating release"
        # get the version from the commit message
        version=$(echo ${{ github.event.head_commit.message }} | grep -o 'v[0-9]+\.[0-9]+\.[0-9]+')
        echo "Version: $version"
        # filename
        fn = $version.zip
        # create a zip archive of the code
        zip -r $fn .
        # sign the zip archive
        cosign sign -key cosign.key $fn
        releaseBody=(cat README.md)
        echo "Release Body: $releaseBody"
        echo "FN=$fn" >> $GITHUB_OUTPUT
        echo "RELEASE_BODY=$releaseBody" >> $GITHUB_OUTPUT
    - name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        body: ${{ steps.prepare-release.outputs.RELEASE_BODY }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ steps.prepare-release.outputs.FN }} # This is the path to the asset you want to upload
        asset_name: ${{ steps.prepare-release.outputs.FN }} # This is the name of the asset on the release
        asset_content_type: application/zip