openapi: "3.0.0"
info:
  version: "1.2.1"
  title: "FemDevs API Documentation"
  description: "The documentation for the FemDevs API."
  contact:
    name: "FemDevs"
    url: "https://thefemdevs.com"
    email: "support@thefemdevs.com"
  license:
    name: "GNU Affero General Public License v3.0"
    identifier: "AGPL-3.0"
servers:
  - url: "https://thefemdevs.com/api/"
    description: "Production Server"
paths:
  /user/get:
    get:
      operationId: "GetUser"
      description: "Gets the user information for the user with the given ID. Returns the user information if the user exists, otherwise returns an error."
      summary: "Get User Info by ID"
      parameters:
        - in: "header"
          name: "x-uid"
          description: "The Firebase UID of the user to get information for"
          schema:
            type: string
      responses:
        200:
          description: "The user information for the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserInfoResponse"
              examples:
                user:
                  value:
                    id: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                    username: "JohnDoe0001"
                    fullName: "John Doe"
                    email: "example@example.com"
                    permissions: 0
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
        404:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 13
                    message: "Unable to find requested resource"
      security:
        - APIToken: []
  /user/update:
    patch:
      operationId: "UpdateUser"
      description: "Updates the user information for the user with the given ID. Returns the user information if the user exists, otherwise returns an error."
      summary: "Update User Info by ID"
      parameters:
        - in: "header"
          name: "x-uid"
          description: "The Firebase UID of the user to get information for"
          schema:
            type: string
      requestBody:
        description: "The new user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserInfo"
            examples:
              displayname:
                value:
                  displayname: "newDisplayName"
              email:
                value:
                  email: "newEmail@example.com"
              password:
                value:
                  password: "newPassword"
              perms:
                value:
                  perms: 1
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserInfoResponse"
              examples:
                displayname:
                  value:
                    id: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                    updatedUser:
                      id: 19
                      firebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                      firstname: "John"
                      lastname: "Doe"
                      displayname: "newDisplayName"
                      email: "example@example.com"
                      dateofbirth: "2000-01-01"
                      permissions: 0
                      betaAccess: 0
                email:
                  value:
                    id: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                    updatedUser:
                      id: 19
                      firebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                      firstname: "John"
                      lastname: "Doe"
                      displayname: "JohnDoe0001"
                      email: "newEmail@example.com"
                      dateofbirth: "2000-01-01"
                      permissions: 0
                      betaAccess: 0
                password:
                  value:
                    id: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                    updatedUser:
                      id: 19
                      firebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                      firstname: "John"
                      lastname: "Doe"
                      displayname: "JohnDoe0001"
                      email: "example@example.com"
                      dateofbirth: "2000-01-01"
                      permissions: 0
                      betaAccess: 0
                perms:
                  value:
                    id: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                    updatedUser:
                      id: 19
                      firebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                      firstname: "John"
                      lastname: "Doe"
                      displayname: "JohnDoe0001"
                      email: "example@example.com"
                      dateofbirth: "2000-01-01"
                      permissions: 0
                      betaAccess: 1
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
        404:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 24
                    message: "Unable to find requested resource"
        500:
          description: "Unable to update user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 23
                    message: "Unable to update user"
      security:
        - APIToken: []
  /user/create:
    post:
      operationId: "CreateUser"
      description: "Creates a user using the provided information. Returns the user information if successful, otherwise returns an error."
      summary: "Create a User"
      requestBody:
        description: "The new user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInfo"
            examples:
              user:
                value:
                  username: "JohnDoe0001"
                  firstname: "John"
                  lastname: "Doe"
                  email: "example@example.com"
                  password: "ARandomPassword"
      responses:
        201:
          description: "The user information for the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserInfoResponse"
              examples:
                user:
                  value:
                    user:
                      uid: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                      email: "example@example.com"
                      emailVerified: false
                      displayName: "JohnDoe0001"
                      disabled: false
                      metadata:
                        lastSignInTime: "null"
                        creationTime: "Sat, 23 Sep 2023 16:06:10 GMT"
                        lastRefreshTime: "null"
                      tokensValidAfterTime: "Sat, 23 Sep 2023 16:06:10 GMT"
                      providerData:
                        - uid: "example@example.com"
                          displayName: "JohnDoe0001"
                          email: "example@example.com"
                          providerId: "password"
                    username: "JohnDoe0001"
                    fullName: "John Doe"
                    email: "example@example.com"
                    permissions: 0
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
                  
        403:
          description: "Unauthorized to create user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 12
                    message: "You are not authorized to access this resource"
        404:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 13
                    message: "Unable to find requested resource"
        500:
          description: "Unable to create user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 24
                    message: "Unable to create user"
      security:
        - APIToken: []
  /user/delete:
    delete:
      operationId: "DeleteUser"
      description: "Deletes the user with the given ID. Returns `true if successful, otherwise returns an error."
      summary: "Delete User by ID"
      parameters:
        - in: "header"
          name: "x-uid"
          description: "The Firebase UID of the user to get delete"
          schema:
            type: string
      responses:
        200:
          description: "The successful notification of the deletion"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserInfoResponse"
              examples:
                deleted:
                  value:
                    uid: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                    deleted: true
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
        403:
          description: "Unauthorized to delete user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 12
                    message: "You are not authorized to access this resource"
        404:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 24
                    message: "Unable to find requested resource"
        500:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 14
                    message: "Unable to delete requested resource"
      security:
        - APIToken: []
  /crypto/enc:
    get:
      operationId: "CryptographyEnc"
      description: "API Endpoint for encrypting data"
      summary: "Encryption Endpoint"
      parameters:
        - in: "query"
          name: "data"
          description: "The data to encrypt"
          schema:
            type: string
      responses:
        200:
          description: "The Encrypted Data"
          content:
            application/json:
              schema:
                type: string
              examples:
                data:
                  value: "Pc6W8_h9XSg8LVhZ8yAP4vtui0sJIMNmC_E18ee9JBQyEmBPLZBDz5Jx745u31Pbr2EkS9Z2S8oFB02uwzpWtt3PH48HE-Wj27VkpvV1glrpZ0f_cW0Ema-gT-6S675xCgb9cy0ZTx3rH-kzuVZXaOwrMjMJTVe7ZpyH8zyUNHnDo0xvkhq9Z523azZm1mq1rcJWMJl8iCuZc6TQp5E2-4xiAZF59ZCZyQCtzxryPzX6aR5ENBvBVdkOaNWtmjWc9ZM5Ni9PXc2cVGbi5IDo6RvX5KuU2DUvGpIKvf15xLptPXZPLNtU4syXjXI4vA03EpV1-Dqs6H7FrtXLAu9M5Q7NxaSxynr4oyJC7CzIXJtJVUwrFN9I-zSJCcR9rE90XzolaWICUjfhSkMtPBTkr_ibNFcyPhG-oaMPGuc1Hb8gJzEDDtWTGPZdV2rbGJIw3XBi_h80fj8F_DQujSGsbo2DmBwSF-PZtKG5WHK9cf3rWCIxF1Sc5Hhkd-HnhrFrSv30Kjvede88MmofhchsS9cEn4eFF7rfj35blLBxGKBKzhS0k_k7FWQznK6J24lfUR_Gtkz3IJlTcqQN-ixucjHdI58xheVETAg_PkK3KZIwgabxQRSz96JUANyEPIPdodIF2f4PpEMomjYp8mCc_0F26uUSgsm9_LcJvC9oNZU"
        400:
          description: "Error With Encryption (Client Caused)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 4
                    message: "Missing Query Parameter(s)"
                no-data:
                  value:
                    code: 5
                    message: "Invalid Query Parameter(s)"
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
        500:
          description: "Error With Encryption (Server Caused)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 10
                    message: "Unable to encrypt data"
      security:
        - APIToken: []
  /crypto/dec:
    get:
      operationId: "CryptographyDecr"
      description: "API Endpoint for decrypting data"
      summary: "Decryption Endpoint"
      parameters:
        - in: "query"
          name: "data"
          description: "The data to decrypt"
          schema:
            type: string
      responses:
        200:
          description: "The Decrypted Data"
          content:
            application/json:
              schema:
                type: string
              examples:
                data:
                  value: "testing"
        400:
          description: "Error with Decryption (Client Caused)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 4
                    message: "Missing Query Parameter(s)"
                no-data:
                  value:
                    code: 5
                    message: "Invalid Query Parameter(s)"
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
        500:
          description: "Error with Decryption (Server Caused)"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 11
                    message: "Unable to decrypt data"
      security:
        - APIToken: []
  /token/create:
    post:
      operationId: "CreateToken"
      description: "Creates a token using the provided information. Returns the token information if successful, otherwise returns an error."
      summary: "Create a Token"
      requestBody:
        description: "The new token information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenCreationRequestBody"
            examples:
              token:
                value:
                  firebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
      responses:
        201:
          description: "The information on the generated token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenCreationResponse"
              examples:
                token:
                  tokenData:
                    license: "1234-5678-9012-3456"
                    token: "fjkh_fdasABc12.dshfa34287y_FDAS34_2"
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
                  
        403:
          description: "Unauthorized to create user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 12
                    message: "You are not authorized to access this resource"
        404:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 13
                    message: "Unable to find requested resource"
        500:
          description: "Unable to create token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 0
                    message: "Misc Error"
      security:
        - APIToken: []
  /token/delete:
    delete:
      operationId: "DeleteToken"
      description: "Deletes the given token. Returns `true` if successful, otherwise returns an error."
      summary: "Delete Token"
      parameters:
        - in: "query"
          name: "token"
          description: "The token to delete"
          schema:
            type: string
      responses:
        200:
          description: "The successful notification of the deletion"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenDeletionResponse"
              examples:
                deleted:
                  value:
                    message: "Token deleted successfully"
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
                  
        403:
          description: "Unauthorized to create user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 12
                    message: "You are not authorized to access this resource"
        404:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 13
                    message: "Unable to find requested resource"
      security:
        - APIToken: []
  /token/list:
    get:
      operationId: "ListTokens"
      description: "Lists all API keys along with the information associated with it. Returns the list of tokens if successful, otherwise returns an error."
      summary: "List Tokens"
      responses:
        200:
          description: "The list of tokens"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListTokenResponse"
              examples:
                tokens:
                  value:
                    - license: "1234-5678-9012-3456"
                      token: "fjkh_fdasABc12.dshfa34287y_FDAS34_2"
                      associatedFirebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                      username: "JohnDoe0001"
                    - license: "1234-5678-9012-3456"
                      token: "fjkh_fdasABc12.dshfa34287y_FDAS34_2"
                      associatedFirebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                      username: "JohnDoe0001"
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
                  
        403:
          description: "Unauthorized to create user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 12
                    message: "You are not authorized to access this resource"
        500:
          description: "Unable to list tokens"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 0
                    message: "Misc Error"
      security:
        - APIToken: []
  /token/info:
    get:
      operationId: "GetTokenInfo"
      description: "Gets the token information for the given token. Returns the token information if the token exists, otherwise returns an error."
      summary: "Get Token Info"
      parameters:
        - in: "query"
          name: "token"
          description: "The token to get information for"
          schema:
            type: string
      responses:
        200:
          description: "The token information for the given token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenInfoResponse"
              examples:
                token:
                  value:
                    license: "1234-5678-9012-3456"
                    token: "fjkh_fdasABc12.dshfa34287y_FDAS34_2"
                    associatedFirebaseUID: "gPcqw6MAbXbZs6ARohHqT2vapFY2"
                    username: "JohnDoe0001"
        401:
          description: "Invalid/Missing API Token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                Missing-Token:
                  value:
                    code: 1
                    message: "Missing API Token"
                Invalid-Token:
                  value:
                    code: 2
                    message: "Invalid API Token"
                  
        403:
          description: "Unauthorized to create user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 12
                    message: "You are not authorized to access this resource"
        404:
          description: "Error with the given token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 13
                    message: "Unable to find requested resource"
        500:
          description: "Unable to get token information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 0
                    message: "Misc Error"
      security:
        - APIToken: []
components:
  securitySchemes:
    APIToken:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      name: "Authorization"
      description: "JSON Web Token Authentication with information containing your license key"
  schemas:
    FirebaseProviderData:
      required:
        - uid
        - displayName
        - email
        - providerId
      properties:
        uid:
          nullable: false
          type: string
          description: "The Firebase UID of the user"
        displayName:
          nullable: false
          type: string
          description: "The display name of the user"
        email:
          nullable: false
          type: string
          description: "The email of the user"
        providerId:
          nullable: false
          type: string
          description: "The provider ID of the user"
    FirebaseMetadata:
      required:
        - lastSignInTime
        - creationTime
        - lastRefreshTime
      properties:
        lastSignInTime:
          nullable: false
          type: string
          description: "The last sign in time of the user"
        creationTime:
          nullable: false
          type: string
          description: "The creation time of the user"
        lastRefreshTime:
          nullable: false
          type: string
          description: "The last refresh time of the user"
    CreatedFirebaseUser:
      required:
        - uid
        - displayName
        - email
        - emailVerified
        - phoneNumber
        - photoURL
        - disabled
        - metadata
        - providerData
      properties:
        uid:
          nullable: false
          type: string
          description: "The Firebase UID of the user"
        displayName:
          nullable: false
          type: string
          description: "The display name of the user"
        email:
          nullable: false
          type: string
          description: "The email of the user"
        emailVerified:
          nullable: false
          type: boolean
          description: "Whether or not the email is verified"
        phoneNumber:
          nullable: false
          type: string
          description: "The phone number of the user"
        photoURL:
          nullable: false
          type: string
          description: "The photo URL of the user"
        disabled:
          nullable: false
          type: boolean
          description: "Whether or not the user is disabled"
        metadata:
          nullable: false
          type: object
          $ref: "#/components/schemas/FirebaseMetadata"
          description: "The metadata of the user"
        providerData:
          nullable: false
          type: array
          items:
            $ref: "#/components/schemas/FirebaseProviderData"
          description: "The provider data of the user"
    FullUserInformation:
      required:
        - id
        - firebaseUID
        - firstname
        - lastname
        - displayname
        - email
        - dateofbirth
        - permissions
        - betaAccess
      properties:
        id:
          nullable: false
          type: integer
          description: "The ID of the user"
        firebaseUID:
          nullable: false
          type: string
          description: "The Firebase UID of the user"
        firstname:
          nullable: false
          type: string
          description: "The first name of the user"
        lastname:
          nullable: false
          type: string
          description: "The last name of the user"
        displayname:
          nullable: false
          type: string
          description: "The display name of the user"
        email:
          nullable: false
          type: string
          description: "The email of the user"
        dateofbirth:
          nullable: false
          type: string
          description: "The date of birth of the user"
        permissions:
          nullable: false
          type: integer
          description: "The permissions of the user"
        betaAccess:
          nullable: false
          type: integer
          description: "Whether or not the user has beta access"
    GetUserInfoResponse:
      required:
        - id
        - username
        - fullName
        - email
        - permissions
      properties:
        id:
          nullable: false
          type: string
          description: "The Firebase UID of the user"
        username:
          nullable: false
          type: string
          description: "The username of the user"
        fullName:
          nullable: false
          type: string
          description: "The full name of the user"
        email:
          nullable: false
          type: string
          description: "The email of the user"
        permissions:
          nullable: false
          type: integer
          description: "The permissions of the user"
    UpdateUserInfo:
      properties:
        displayname:
          nullable: true
          type: string
          description: "The new display name of the user"
        email:
          nullable: true
          type: string
          description: "The new email of the user"
        password:
          nullable: true
          type: string
          description: "The new password of the user"
        perms:
          nullable: true
          type: integer
          description: "The new permissions of the user"
    UpdateUserInfoResponse:
      required:
        - id
        - upatedUser
      properties:
        id:
          nullable: false
          type: string
          description: "The Firebase UID of the user"
        updatedUser:
          nullable: false
          type: object
          $ref: "#/components/schemas/FullUserInformation"
          description: "The updated user information"
    CreateUserInfo:
      required:
        - username
        - firstname
        - lastname
        - email
        - password
      properties:
        username:
          nullable: false
          type: string
          description: "The username of the user"
        firstname:
          nullable: false
          type: string
          description: "The first name of the user"
        lastname:
          nullable: false
          type: string
          description: "The last name of the user"
        email:
          nullable: false
          type: string
          description: "The email of the user"
        password:
          nullable: false
          type: string
          description: "The password of the user"
    CreateUserInfoResponse:
      required:
        - user
        - username
        - fullName
        - email
        - permissions
      properties:
        user:
          nullable: false
          type: object
          $ref: "#/components/schemas/CreatedFirebaseUser"
          description: "The user information"
        username:
          nullable: false
          type: string
          description: "The username of the user"
        fullName:
          nullable: false
          type: string
          description: "The full name of the user"
        email:
          nullable: false
          type: string
          description: "The email of the user"
        permissions:
          nullable: false
          type: integer
          description: "The permissions of the user"
    DeleteUserInfoResponse:
      required:
        - uid
        - deleted
      properties:
        uid:
          nullable: false
          type: string
          description: "The Firebase UID of the user"
        deleted:
          nullable: false
          type: boolean
          description: "Whether or not the user was deleted"
    ErrorData:
      required:
        - code
        - message
      properties:
        code:
          nullable: false
          type: integer
          description: "The error code"
        message:
          nullable: false
          type: string
          description: "The error message"
    TokenCreationRequestBody:
      required:
        - firebaseUID
      properties:
        firebaseUID:
          nullable: false
          type: string
          description: "The Firebase UID of the user"
    TokenCreationResponse:
      required:
        - token
        - license
      properties:
        token:
          nullable: false
          type: string
          description: "The token that was created"
        license:
          nullable: false
          type: string
          description: "The license thats associated with the token"
    TokenDeletionResponse:
      required:
        - message
      properties:
        message:
          nullable: false
          type: string
          description: "The message that was returned"
    TokenData:
      required:
        - license
        - token
        - associatedFirebaseUID
        - username
      properties:
        license:
          nullable: false
          type: string
          description: "The license that the token is associated with"
        token:
          nullable: false
          type: string
          description: "The token"
        associatedFirebaseUID:
          nullable: false
          type: string
          description: "The Firebase UID that the token is associated with"
        username:
          nullable: false
          type: string
          description: "The username that the token is associated with"
    ListTokenResponse:
      required:
        - tokens
      properties:
        tokens:
          nullable: false
          type: array
          items:
            $ref: "#/components/schemas/ListTokenData"
          description: "The list of tokens"
