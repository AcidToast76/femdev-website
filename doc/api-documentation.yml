openapi: "3.0.0"
info:
  version: "1.1.2-dev"
  title: "FemDevs API Documentation"
  description: "The documentation for the FemDevs API."
  contact:
    name: "FemDevs"
    url: "https://thefemdevs.com"
    email: "support@thefemdevs.com"
  license:
    name: "GNU Affero General Public License v3.0"
    identifier: "AGPL-3.0"
servers:
  - url: "https://thefemdevs.com/api/"
    description: "Production Server"
paths:
  /user/get:
    get:
      operationId: "GetUser"
      description: "Gets the user information for the user with the given ID. Returns the user information if the user exists, otherwise returns an error."
      summary: "Get User Info by ID"
      parameters:
        - in: "header"
          name: "x-user-id"
          description: "The ID of the user to get information for"
          schema:
            type: "string"
      responses:
        200:
          description: "The user information for the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
              examples:
                user:
                  value:
                    id: 1
                    name: "FemDevs"
                    picture: "https://thefemdevs.com/assets/img/logo.png"
                    flags: 0
                    username: "FemDevs"
        400:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 7
                    message: "Invalid User ID"
                    fatal: false
      security:
        - BearerAuth: []
  /user/update:
    patch:
      operationId: "UpdateUser"
      description: "Updates the user information for the user with the given ID. Returns the user information if the user exists, otherwise returns an error."
      summary: "Update User Info by ID"
      parameters:
        - in: "header"
          name: "x-user-id"
          description: "The ID of the user to get information for"
          schema:
            type: "string"
        - in: "header"
          name: "x-UAT"
          description: "The `User Access Token` of the user to delete"
          schema:
            type: "string"
      requestBody:
        description: "The new user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInfo"
            examples:
              user:
                value:
                  id: 1
                  name: "FemDevs"
                  picture: "https://thefemdevs.com/assets/img/logo.png"
                  flags: 0
                  username: "FemDevs"
      responses:
        200:
          description: "Successful Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdateData"
              examples:
                user:
                  value:
                    success: true
                    user:
                      id: 1
                      name: "FemDevs"
                      picture: "https://thefemdevs.com/assets/img/logo.png"
                      flags: 0
                      username: "FemDevs"
        400:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserUpdateData"
              examples:
                error:
                  value:
                    success: false
                    error:
                      code: 7
                      message: "Invalid User ID"
                      fatal: false
      security:
        - BearerAuth: []
  /user/create:
    post:
      operationId: "CreateUser"
      description: "Creates a user using the provided information. Returns the user information if successful, otherwise returns an error."
      summary: "Create a User"
      requestBody:
        description: "The new user information"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserInfo"
            examples:
              user:
                value:
                  name: "FemDevs"
                  picture: "https://thefemdevs.com/assets/img/logo.png"
                  username: "FemDevs"
      responses:
        200:
          description: "The user information for the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
              examples:
                user:
                  value:
                    id: 1
                    name: "FemDevs"
                    picture: "https://thefemdevs.com/assets/img/logo.png"
                    flags: 0
                    username: "FemDevs"
        400:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 6
                    message: "Invalid User Information"
                    fatal: false
      security:
        - BearerAuth: []
  /user/delete:
    delete:
      operationId: "DeleteUser"
      description: "Deletes the user with the given ID. Returns `true if successful, otherwise returns an error."
      summary: "Delete User by ID"
      parameters:
        - in: "header"
          name: "x-user-id"
          description: "The ID of the user to get delete"
          schema:
            type: "string"
        - in: "header"
          name: "x-UAT"
          description: "The `User Access Token` of the user to delete"
          schema:
            type: "string"
      responses:
        200:
          description: "The successful notification of the deletion"
          content:
            application/json:
              schema:
                type: "boolean"
              examples:
                user:
                  value: true
        400:
          description: "Error with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 7
                    message: "Invalid User ID"
                    fatal: false
      security:
        - BearerAuth: []
  /crypto/enc:
    get:
      operationId: "CryptographyEnc"
      description: "API Endpoint for encrypting data"
      summary: "Encryption Endpoint"
      parameters:
        - in: "query"
          name: "data"
          description: "The data to encrypt"
          schema:
            type: "string"
      responses:
        200:
          description: "The Encrypted Data"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                data:
                  value: "a78e7f16e96242c448f0f400b6a06b3b"
        400:
          description: "Error With Encryption"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 4
                    message: "Invalid Data"
                    fatal: true
                no-data:
                  value:
                    code: 3
                    message: "No Data Provided"
                    fatal: false
      security:
        - BearerAuth: []
  /crypto/dec:
    get:
      operationId: "CryptographyDecr"
      description: "API Endpoint for decrypting data"
      summary: "Decryption Endpoint"
      parameters:
        - in: "query"
          name: "data"
          description: "The data to decrypt"
          schema:
            type: "string"
      responses:
        200:
          description: "The Decrypted Data"
          content:
            application/json:
              schema:
                type: "string"
              examples:
                data:
                  value: "testing"
        400:
          description: "Error with Decryption"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorData"
              examples:
                error:
                  value:
                    code: 4
                    message: "Invalid Data"
                    fatal: true
                no-data:
                  value:
                    code: 3
                    message: "No Data Provided"
                    fatal: false
      security:
        - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
      name: "Authorization"
      description: "JSON Web Token Authentication with information containing your license key"
  schemas:
    UserInfo:
      properties:
        id:
          nullable: false
          type: "integer"
        name:
          nullable: false
          type: "string"
        picture:
          nullable: false
          type: "string"
        flags:
          nullable: false
          type: "integer"
        username:
          nullable: false
          type: "string"
    ErrorData:
      properties:
        code:
          nullable: false
          type: "integer"
        message:
          nullable: false
          type: "string"
        fatal:
          nullable: false
          type: "boolean"
    UserUpdateData:
      properties:
        success:
          nullable: false
          type: "boolean"
        user:
          nullable: true
          type: "object"
          $ref: "#/components/schemas/UserInfo"
        error:
          nullable: true
          type: "object"
          $ref: "#/components/schemas/ErrorData"
    CreateUserInfo:
      properties:
        name:
          nullable: false
          type: "string"
        picture:
          nullable: false
          type: "string"
        username:
          nullable: false
          type: "string"
